#!/bin/bash

#
# Helper script for the dargstack template.
#
# Requires sudo >= 1.8.21.
#

# Exit on errors, use last pipe error code, do not overwrite files, ensure
# variables exist
set -o errexit -o pipefail -o noclobber -o nounset

# allow matching of files by glob directly without find
shopt -s globstar nullglob

# Set color codes for use with echo
LIGHT_BLUE='\e[94m'
LIGHT_GREEN='\e[92m'
LIGHT_RED='\e[91m'
LIGHT_YELLOW='\e[93m'
NC='\e[0m'

if ! hash git 2>/dev/null; then
	echo -e "${LIGHT_BLUE}git${LIGHT_YELLOW} is not available.${NC}"

	if ! hash lsb_release 2>/dev/null; then
		echo -e "${LIGHT_RED}Could not determine OS distribution!${NC}"
		echo -e "${LIGHT_BLUE}lsb_release${NC} is not available."
		exit 1
	fi

	if [[ ("$(lsb_release -is)" == "Debian") || (\
	"$(lsb_release -is)" == "Ubuntu") ]]; then
		sudo apt-get install -y git
	else
		echo -e "${LIGHT_RED}Could not install ${LIGHT_BLUE}git${LIGHT_RED}" \
			" automatically!${NC}"
		echo -e "Please install it manually."
		exit 1
	fi
fi

# Get this script's directory
THIS=$(dirname "$(readlink -f "$0")")

# convert the project name to a valid DNS name
DIRECTORY_NAME_LITERAL="${PWD##*/}"
DIRECTORY_NAME="${DIRECTORY_NAME_LITERAL//[^A-Za-z_]/-}"
PROJECT_OWNER="${PWD%/*}"
PROJECT_OWNER="${PROJECT_OWNER##*/}"
PROJECT_NAME="${DIRECTORY_NAME%"_stack"}"

ADVERTISE_ADDR=""
MODE="development"
OFFLINE=false
URL="$(git remote get-url origin || true)"
VERSION=""

if [ "$URL" == "" ]; then
	URL="https://github.com/<owner>/<name>.git"
fi

function usage() {
	echo -e "usage: ${0##*/} ${LIGHT_YELLOW}<module>${NC}" \
		"${LIGHT_YELLOW}<options>${NC}"
	echo -e ""
	echo -e "${LIGHT_YELLOW}modules${NC}"
	echo -e "    build [sibling]           Builds the main project or the" \
		"specified sibling, tagged as ${LIGHT_BLUE}dev${NC}. Only for" \
		"development."
	echo -e "    deploy                    Deploys a Docker project either" \
		"from a full local development clone of the project or, with the" \
		"${LIGHT_BLUE}--production${NC} parameter provided, by doing a" \
		"sparse Git checkout containing only the production configuration." \
		"In the latter case ${LIGHT_BLUE}derive${NC} is executed first and" \
		"the existence of required environment variables is checked before" \
		"deployment starts."
	echo -e "    derive                    Derives a" \
		"${LIGHT_BLUE}./production/stack.yml${NC} from" \
		"${LIGHT_BLUE}./development/stack.yml${NC}."
	echo -e "    rgen                      Generate the README."
	echo -e "    rm                        Removes the stack."
	echo -e "    self-update               Updates the helper script."
	echo -e "    validate                  Checks for an up-2-date README."
	echo -e ""
	echo -e "${LIGHT_YELLOW}options${NC}"
	echo -e "    -a, --advertise-addr      The address Docker Swarm advertises."
	echo -e "    -h, --help                Display this help. Usable with" \
		"modules: all."
	echo -e "    -o, --offline             Do not try to update the checkout"
	echo -e "    -p, --production <tag>    Execute in production mode." \
		"Version must equal a tag name or ${LIGHT_BLUE}latest${NC}. Usable" \
		"with modules: ${LIGHT_BLUE}deploy${NC}."
	echo -e "    -u, --url <url>           The URL to clone from. May" \
		"include the substrings ${LIGHT_BLUE}<owner>${NC} and" \
		"${LIGHT_BLUE}<name>${NC} that are replaced by their corresponding" \
		"value that is inferred from the dargstack directory structure." \
		"Usable with modules: ${LIGHT_BLUE}deploy${NC}."
	exit 1
}

function docker_sudo() {
	local MODE="$1"
	shift

	if id -nG | grep -qw "docker"; then
		docker "$@"
	else
		ENV_VARS_TO_PRESERVE=("STACK_DOMAIN")

		if [ "$MODE" = "production" ]; then
			if [ -f "./src/production/stack.env" ]; then
				IFS=' ' read -r -a ENV_VARS_TO_PRESERVE_EXTENSION <<< "$(grep -v '^#' "./src/production/stack.env" |
					awk -F= '{print $1}' | xargs)"
				ENV_VARS_TO_PRESERVE+=("${ENV_VARS_TO_PRESERVE_EXTENSION[@]}")
			else
				echo -e "Not preserving any environment variables for root as" \
					"file ${LIGHT_BLUE}./src/production/stack.env${NC} was" \
					"not found."
			fi
		else
			if [ -f "./src/development/stack.env" ]; then
				IFS=' ' read -r -a ENV_VARS_TO_PRESERVE_EXTENSION <<< "$(grep -v '^#' "./src/development/stack.env" |
					awk -F= '{print $1}' | xargs)"
				ENV_VARS_TO_PRESERVE+=("${ENV_VARS_TO_PRESERVE_EXTENSION[@]}")
			else
				echo -e "Not preserving any environment variables for root as" \
					"file ${LIGHT_BLUE}./src/development/stack.env${NC} was" \
					"not found."
			fi
		fi

		local ENV_VARS_TO_PRESERVE_STRING="${ENV_VARS_TO_PRESERVE[*]}"
		ENV_VARS_TO_PRESERVE_STRING="${ENV_VARS_TO_PRESERVE_STRING//${IFS:0:1}/,}"

		if [ -z "${SUDO_PASSWORD+x}" ]; then
			sudo --preserve-env="${ENV_VARS_TO_PRESERVE_STRING}" docker "$@"
		else
			echo "$SUDO_PASSWORD" |
				sudo -S --preserve-env="${ENV_VARS_TO_PRESERVE_STRING}" docker "$@"
		fi
	fi
}

function guard_valid_config() {
	local valid=$1

	if [ "$valid" -gt 0 ]; then
		echo -e "${LIGHT_RED}Deployment of ${LIGHT_BLUE}$PROJECT_NAME" \
			"${LIGHT_RED}stack for ${LIGHT_BLUE}$MODE${LIGHT_RED} aborted" \
			"due to invalid configuration!${NC}"
		exit "$valid"
	fi
}

function check_secret_templates() {
	local env=$1
	valid=0

	for template_path in "src/$env/secrets"/**/*.secret.template; do
		secret_path=${template_path%.template}
		secret_base_name="${secret_path##*/}"

		if [[ ! -s "$secret_path" ]]; then
			echo -e "${LIGHT_RED}Secret ${LIGHT_BLUE}${secret_path%/*}/$secret_base_name${LIGHT_RED} is missing!${NC}"
			valid=1
		fi

		if grep -q "UNSET THIRD PARTY SECRET" "$secret_path"; then
			echo -e "${LIGHT_YELLOW}Third party secret ${LIGHT_BLUE}${secret_path%/*}/$secret_base_name${LIGHT_YELLOW} is inactive${NC}"
		fi
	done

	return $valid
}

function export_env_file() {
    local env_file="$1"

    if [[ ! -f "$env_file" ]]; then
        echo "Error: File '$env_file' not found!"
        return 1
    fi

    while IFS='=' read -r key value || [[ -n "$key" ]]; do
        # Ignore lines starting with # (comments) and empty lines
        if [[ "$key" =~ ^#.*$ || -z "$key" ]]; then
            continue
        fi

        # Remove surrounding quotes (if any)
        value=$(echo "$value" | sed -E "s/^['\"](.*)['\"]$/\1/")

        # Export variable
        export "$key"="$value"
    done < "$env_file"
}

function deploy() {
	local PROJECT_OWNER="$1"
	local PROJECT_NAME="$2"
	local VERSION="$3"
	local URL="$4"
	local MODE="$5"
	local ADVERTISE_ADDR="$6"

	if [ "$MODE" = "production" ]; then
		if [ ! -d "./.git" ]; then
			echo -e "Initializing a sparse Git checkout..."

			git init
			git remote add origin "$URL"
			git config advice.detachedHead false
			git config core.sparsecheckout true

			{
				echo "src/development/stack.env.template"
				echo "src/development/stack.yml"
				echo "src/production/*"
			} >>"./.git/info/sparse-checkout"
		fi

		if [ "$OFFLINE" = true ]; then
			echo -e "Skipping checkout update (offline mode)."
		else
			echo -e "Updating checkout..."

			git fetch -t
			git fetch --depth 1

			latest=false

			if [ "$VERSION" = "latest" ]; then
				latest=true
			fi

			if [ "$(git tag -l)" = "" ]; then
				echo -e "${LIGHT_YELLOW}The stack repository has no tags!${NC}"
				git checkout origin/master
			else
				if [ $latest = "true" ]; then
					VERSION=$(git rev-list --tags --max-count=1)
				else
					VERSION=$(git rev-list --max-count=1 "$VERSION")
				fi

				git_describe=$(git describe --tags "$VERSION" 2>/dev/null) ||
					true

				if [ "$git_describe" = "" ]; then
					echo -e "${LIGHT_RED}Git describe failed!${NC}"

					if [ "$latest" = "true" ]; then
						echo -e "${LIGHT_YELLOW}Make sure the stack" \
							"repository is tagged.${NC}"
					else
						echo -e "${LIGHT_YELLOW}Make sure the stack" \
							"repository has the ${LIGHT_BLUE}$VERSION" \
							"${LIGHT_YELLOW} tag.${NC}"
					fi

					exit 1
				fi

				# Update the sparse checkout (overwrite files that changed on
				# git, keeping files that are not part of the repository)
				git fetch --depth 1 origin tag "$git_describe"
				git checkout "$git_describe"
			fi
		fi

		derive

		echo -e "Searching for unset environment variables..."

		# Compare .env.template and .env files to find variables that are not
		# yet set.
		awk=""
		error=false

		while read -r -d $'\0' x; do
			# Create environment variable file from template
			if [ ! -s "${x%.template}" ]; then
				cp "$x" "${x%.template}"
			fi

			if [[ "$(echo "$x" | sed -n "/.env.template$/p")" != "" ]]; then
				# Check if all environment variables are set
				awk=$(awk '
				{
					if (NR == FNR) {
						key = value = $0
						sub("=.*$", "", key)
						sub("^.*=", "", value)
						lines[key] = value
					}

					if ((NR != FNR) && ($0 !~ /(^#.*$|^$)/)) {
						sub("=.*$", "")

						if (!($0 in lines) || (lines[$0] == "")) {
							print
						}
					}
				}' "${x%.template}" "$x")

				if [ "$awk" != "" ]; then
					error=true
					echo -e "\n${LIGHT_RED}The following environment" \
						"variables are not set in ${LIGHT_BLUE}" \
						"${x%.template}${LIGHT_RED}:\n${LIGHT_YELLOW}$awk${NC}"
				fi
			fi
		done < <(find . -type f -name '*.template' -print0)

		if [ "$error" = true ]; then
			exit 1
		fi

		if [ -f "./src/production/stack.env" ]; then
			echo -e "Exporting production environment variables..."

			export "STACK_DOMAIN=$PROJECT_NAME"
			export_env_file "./src/production/stack.env"
		fi

		containers_exited=$(docker_sudo default ps --filter "status=exited" -q)

		if [ -z "$containers_exited" ]; then
			echo -e "No stopped containers to remove."
		else
			echo -e "Removing stopped containers..."
			# shellcheck disable=SC2086
			docker_sudo default rm $containers_exited
		fi

		if isStackRunning "$PROJECT_NAME"; then
			docker_sudo default image prune
		fi
	else
		if [ -f "./src/development/stack.env" ]; then
			echo -e "Exporting development environment variables..."

			export_env_file "./src/development/stack.env"
		fi

		check_secret_templates "development" || valid=$?
		guard_valid_config $valid

		export "STACK_DOMAIN=localhost"
	fi

	# Ensure Docker is part of a swarm
	if [ "$(docker_sudo default info --format '{{.Swarm.LocalNodeState}}')" = \
		"inactive" ]; then
		echo -e "Creating swarm..."

		if [ "$ADVERTISE_ADDR" == "" ]; then
			docker_sudo default swarm init
		else
			docker_sudo default swarm init --advertise-addr "$ADVERTISE_ADDR"
		fi
	fi

	echo -e "Deploying ${LIGHT_BLUE}$PROJECT_NAME${NC} stack for" \
		"${LIGHT_BLUE}$MODE${NC}..."

	docker_sudo "$MODE" stack deploy -c "./src/$MODE/stack.yml" \
		--with-registry-auth "$PROJECT_NAME"
}

function derive() {
	local PATH_DEV_SHORT="src/development"
	local PATH_DEV="$PWD/$PATH_DEV_SHORT/"
	local PATH_PROD_SHORT="src/production"
	local PATH_PROD="$PWD/$PATH_PROD_SHORT/"
	local IN="$PATH_DEV/stack.yml"
	local OUT="$PATH_PROD/stack.yml"
	local seds=()

	echo -e "Deriving ${LIGHT_BLUE}./${PATH_PROD_SHORT}/stack.yml${NC} from" \
		"${LIGHT_BLUE}./${PATH_DEV_SHORT}/stack.yml${NC}..."

	cp "$IN" "$OUT"

	echo -e "Applying default seds..."

	sed -i "s/^.* #DARGSTACK-REMOVE$//g" "$OUT"
	sed -i "s/file:.*\.secret/external: true/g" "$OUT"
	sed -i "s/\.\/certificates\//acme_data/g" "$OUT"
	sed -i "s/\.\.\/production/\./g" "$OUT"

	if [ -f "./${PATH_PROD_SHORT}/production.sed" ]; then
		echo -e "Applying seds from" \
			"${LIGHT_BLUE}./${PATH_PROD_SHORT}/production.sed${NC}..."

		readarray -t seds <"./${PATH_PROD_SHORT}/production.sed"

		for sed_string in "${seds[@]}"; do
			sed -i "$sed_string" "$OUT"
		done
	fi

	if [ -f "./${PATH_PROD_SHORT}/production.yml" ]; then
		echo -e \
			"Merging ${LIGHT_BLUE}./${PATH_PROD_SHORT}/production.yml${NC}..."

		# shellcheck disable=SC2005
		echo "$(docker_sudo default run --rm -v "$OUT:/manifests/stack.yml" -v \
			"$PATH_PROD/production.yml:/manifests/production.yml" \
			gfranks/spruce spruce merge /manifests/stack.yml \
			/manifests/production.yml)" >|"$OUT"
	fi

	echo -e "Deriving ${LIGHT_BLUE}./${PATH_PROD_SHORT}/stack.env${NC} from" \
		"${LIGHT_BLUE}./${PATH_DEV_SHORT}/stack.env${NC} and" \
		"${LIGHT_BLUE}./${PATH_PROD_SHORT}/production.env${NC}..."

	if [ -f "./src/production/stack.env" ]; then
		rm "./src/production/stack.env"
	fi

	if [ -f "./src/development/stack.env" ]; then
		echo -e "Adding development environment variables..."

		cat "./src/development/stack.env" >>"./src/production/stack.env"
	fi

	if [ -f "./src/production/production.env" ]; then
		echo -e "Adding production environment variables..."

		cat "./src/production/production.env" >> \
			"./src/production/stack.env"
	fi
}

function isStackRunning() {
	local PROJECT_NAME="$1"

	if [[ -n "$(docker_sudo default service ls \
		--filter label=com.docker.stack.namespace="$PROJECT_NAME" -q)" || -n \
	"$(docker_sudo default network ls \
		--filter label=com.docker.stack.namespace="$PROJECT_NAME" -q)" ]]; then
		return 0
	else
		return 1
	fi
}

function rgen() {
	local OUT="$PWD/README.md"

	echo -e "Creating ${LIGHT_BLUE}README.md${NC}..."
	docker_sudo default run --rm -v "$PWD:/mnt/$DIRECTORY_NAME" \
		ghcr.io/dargstack/dargstack_rgen --path "/mnt/$DIRECTORY_NAME" \
		>|"$OUT"
}

function remove() {
	local PROJECT_NAME="$1"
	echo -e "Removing stack ${LIGHT_BLUE}$PROJECT_NAME${NC}..."
	docker_sudo default stack rm "$PROJECT_NAME"

	if isStackRunning "$PROJECT_NAME"; then
		echo -e "Waiting for stack to vanish..."
		until [ -z "$(docker_sudo default service ls \
			--filter label=com.docker.stack.namespace="$PROJECT_NAME" -q)" ]; do
			sleep 1
		done

		until [ -z "$(docker_sudo default network ls \
			--filter label=com.docker.stack.namespace="$PROJECT_NAME" -q)" ]; do
			sleep 1
		done
	fi
}

function validate() {
	echo -e "Validating ${LIGHT_BLUE}README.md${NC}..."
	docker_sudo default run --rm -v "$PWD:/mnt/$DIRECTORY_NAME" \
		ghcr.io/dargstack/dargstack_rgen --path "/mnt/$DIRECTORY_NAME" -v
}

function selfUpdate() {
	wget "$(printf "%s" \
		"https://raw.githubusercontent.com/" \
		"dargstack/dargstack/master/src/dargstack")" -O "$THIS/dargstack"
	chmod +x "$THIS/dargstack"
}

GETOPT_PATH=/bin/getopt

if [ -f /opt/homebrew/opt/gnu-getopt/bin/getopt ]; then
	GETOPT_PATH=/opt/homebrew/opt/gnu-getopt/bin/getopt
fi

# Check if getopt is available
# shellcheck disable=SC2251
! $GETOPT_PATH --test >/dev/null
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
	echo -e "${LIGHT_RED}Cannot parse parameters!${NC}"
	exit 1
fi

# Parse command line parameters
OPTIONS=a:hop:u:
LONGOPTS=advertise-addr:,help,offline,production:,url:

# shellcheck disable=SC2251
! PARSED=$($GETOPT_PATH --options=$OPTIONS --longoptions=$LONGOPTS \
	--name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
	exit 2
fi

eval set -- "$PARSED"

while true; do
	case "$1" in
	-a | --advertise-addr)
		ADVERTISE_ADDR="$2"
		shift 2
		;;
	-h | --help)
		echo -e "Dargstack template helper script."
		echo -e ""
		usage
		;;
	-o | --offline)
		OFFLINE=true
		shift 1
		;;
	-p | --production)
		MODE="production"
		VERSION="$2"
		shift 2
		;;
	-u | --url)
		URL="$2"
		shift 2
		;;
	--)
		shift
		break
		;;
	*)
		echo -e "${LIGHT_RED}Programming error!${NC}"
		exit 2
		;;
	esac
done

if [[ $# -gt 2 ]]; then
	echo -e "${LIGHT_YELLOW}ignoring everything after $2${NC}!"
fi

if [ $# -lt 1 ]; then
	echo -e "${LIGHT_RED}No module parameter provided!${NC}"
	usage
elif [[ "$1" != "build" && "$1" != "deploy" && "$1" != "derive" && \
	"$1" != "redeploy" && "$1" != "rgen" && "$1" != "rm" && \
	"$1" != "self-update" && "$1" != "validate" ]]; then
	echo -e "${LIGHT_RED}Parameter '$1' equals neither" \
		"${LIGHT_BLUE}build${LIGHT_RED} nor ${LIGHT_BLUE}deploy${LIGHT_RED} nor" \
		"${LIGHT_BLUE}derive${LIGHT_RED} nor ${LIGHT_BLUE}redeploy${LIGHT_RED}" \
		"nor ${LIGHT_BLUE}rm${LIGHT_RED} nor" \
		"${LIGHT_BLUE}self-update${LIGHT_RED} nor" \
		"${LIGHT_BLUE}validate${LIGHT_RED}!${NC}"
	exit 1
fi

if [[ ("$1" = "build") && "$MODE" = "development" && (! -d \
	"../$PROJECT_NAME") ]]; then
	echo -e "${LIGHT_RED}Running in ${LIGHT_BLUE}development${LIGHT_RED}" \
		"mode, but directory ${LIGHT_BLUE}../$PROJECT_NAME${LIGHT_RED} does" \
		"not exist!${NC}"
	exit 1
fi

URL=${URL/"<owner>"/$PROJECT_OWNER}
URL=${URL/"<name>"/${PROJECT_NAME}_stack}

echo -e "Dargstack project ${LIGHT_BLUE}$URL${NC} for" \
	"${LIGHT_BLUE}$MODE${NC}.\n"

case "$1" in
"build")
	project="$PROJECT_NAME"

	if [ "${2+defined}" = "defined" ]; then
		project="$2"
	fi

	echo -e "Building ${LIGHT_BLUE}$PROJECT_OWNER/$project:dev${NC}..."

	if [ "$MODE" == "production" ]; then
		docker_sudo default build -t "$PROJECT_OWNER/$project:$VERSION" "../$project/"
	else
		docker_sudo default build -t "$PROJECT_OWNER/$project:dev" \
			--target=development "../$project/"
	fi
	;;
"deploy")
	deploy "$PROJECT_OWNER" "$PROJECT_NAME" "$VERSION" "$URL" "$MODE" \
		"$ADVERTISE_ADDR"
	;;
"derive")
	derive
	;;
"redeploy")
	remove "$PROJECT_NAME"
	deploy "$PROJECT_OWNER" "$PROJECT_NAME" "$VERSION" "$URL" "$MODE" \
		"$ADVERTISE_ADDR"
	;;
"rgen")
	rgen
	;;
"rm")
	remove "$PROJECT_NAME"
	;;
"self-update")
	trap selfUpdate EXIT
	;;
"validate")
	validate
	;;
esac

echo -e "\n${LIGHT_GREEN}Done${NC}"
